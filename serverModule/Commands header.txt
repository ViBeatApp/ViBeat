Messages from client to server:

AUTHENTICATION(NAME,USER_ID,IMAGE)
NEARBY_PARTIES(CLIENTLOCATION)
SEARCH_PARTY(NAME)
JOIN(PARTY_ID)
CREATE(NAME,IS_PRIVATE)
DISCONNECTED

ADD_SONG (URL)
DELETE_SONG(TrackID)
SWAP_SONGS(TRACK_ID_1,TrackID_2)
PLAY_SONG(TRACK_ID,OFFSET)			//if it's the last song - don't send message. 
IM_READY(TRACK_ID)
PAUSE(TRACK_ID)

RENAME_PARTY(NAME)
MAKE_PRIVATE(IS_PRIVATE)
CONFIRM_REQUEST(USER_ID,Bool CONFIRMED)
MAKE_ADMIN(USER_ID)
UPDATE_LOCATION(LOCATION)
CLOSE_PARTY()  					//kill the party
LEAVE_PARTY()


Messages from server to client:	

SEARCH_RESULT(result : [{name,id,image}...])		// could be empty array.
REJECTED - json info is empty {} !!

GET_READY(TRACK_ID,OFFSET)				//if offset == -1, there is not songs in list.
PLAY_SONG(TRACK_ID,OFFSET)
PAUSE()
CLOSE_PARTY()
	
SYNC_PARTY({
		"USERS",[{NAME,USER_ID,IMAGE,IS_ADMIN},...]
		"IMAGE", byte[]
		"LOCATION", loc
		"REQUESTS",[{NAME,USER_ID,IMAGE},...]			//if private - value = 0 
		"SONGS",[{URL,TRACK_ID},...]
		"NAME",name
		"IS_PRIVATE",bool IS_PRIVATE})
		
IDs:
partyID = Counter.
trackID = Counter.
userID 	= authenticationID.

{"cmd_type": command_type, "cmd_info",json}

updateParty({
		"NEW_USERS",[{NAME,USER_ID,IMAGE},...]
		"DELETE_USERS",[{USER_ID},...]
		"NEW_REQUESTS",[{NAME,USER_ID,IMAGE},...]
		"DELETE_REQUESTS",[{USER_ID},...]
		"NEW_ADMIN",[{USER_ID},...]
		"DELETE_ADMIN",[{USER_ID},...]
		"NEW_SONGS",[{URL,TRACK_ID},...]
		"DELETE_SONGS",[{TRACK_ID},...]
		"SWAP_SONGS",[{TRACK_ID_1,TRACK_ID_2},...]
		"PARTY_RENAME","NAME"
		"IS_PRIVATE",bool IS_PRIVATE})