package serverObjects;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Command {
	public CommandType cmd_type;
	public JSONObject cmd_info;
	
	public Command(CommandType cmd_type) throws JSONException {
		this.cmd_type = cmd_type;
		this.cmd_info = new JSONObject();
	}
	
	public Command(CommandType cmd_type, JSONObject obj) {
		this.cmd_type = cmd_type;
		this.cmd_info = obj;
	}
	
	public Command(byte[] message) throws JSONException {
		if(message == null){
			this.cmd_type = CommandType.DISCONNECTED;
			return;
		}
		JSONObject json = byteToJson(message);
		this.cmd_type = CommandType.valueOf(json.getString(jsonKey.COMMAND_TYPE.name()));
		this.cmd_info = json.getJSONObject(jsonKey.COMMAND_INFO.name());
	}

	public byte[] commandTobyte() throws JSONException {
		JSONObject json = new JSONObject();
		json.put(jsonKey.COMMAND_TYPE.name(), this.cmd_type);
		json.put(jsonKey.COMMAND_INFO.name(), this.cmd_info);
		return json.toString().getBytes();
	}
	
	public void printCommand() {
		System.out.println("command " + this.cmd_type + ", info" + this.cmd_info);
	}
	
	private JSONObject byteToJson(byte[] message) throws JSONException {
		return new JSONObject(new String(message));
	}
	
	public void setAttribute(jsonKey key, String string) throws JSONException {
		this.cmd_info.put(key.name(),string);
	}
	
	public void setAttribute(jsonKey key, int num) throws JSONException {
		this.cmd_info.put(key.name(),num);
	}

	public void setAttribute(jsonKey key, double num) throws JSONException {
		this.cmd_info.put(key.name(),num);
	}
	
	public void setAttribute(jsonKey key, long num) throws JSONException {
		this.cmd_info.put(key.name(),num);
	}
	
	public void setAttribute(jsonKey key, boolean bool) throws JSONException {
		this.cmd_info.put(key.name(),bool);
	}
	
	public void setAttribute(jsonKey key, JSONArray resultArray) throws JSONException {
		this.cmd_info.put(key.name(),resultArray);
	}
	
	public String getStringAttribute(jsonKey key) throws JSONException {
		return this.cmd_info.getString(key.name());
	}
	
	public int getIntAttribute(jsonKey key) throws JSONException {
		return this.cmd_info.getInt(key.name());
	}
	
	public long getLongAttribute(jsonKey key) throws JSONException {
		return this.cmd_info.getLong(key.name());
	}
	
	public boolean getBoolAttribute(jsonKey key) throws JSONException {
		return this.cmd_info.getBoolean(key.name());
	}
	
	public double getDoubleAttribute(jsonKey key) throws JSONException {
		return this.cmd_info.getDouble(key.name());
	}
	
	public JSONArray getSyncPartyAttribute(jsonKey key) throws JSONException {
		return cmd_info.getJSONArray(key.name());
	}
	
	public static Command create_authentication_command(String name,int userID,String image) throws JSONException {
		Command cmd = new Command(CommandType.AUTHENTICATION);
		cmd.setAttribute(jsonKey.NAME, name);
		cmd.setAttribute(jsonKey.USER_ID, userID);
		cmd.setAttribute(jsonKey.IMAGE, image);
		return cmd;
	}
	public static Command create_nearbyParties_Command(double longitude,double latitude,double altitude) throws JSONException {
		Command cmd = new Command(CommandType.NEARBY_PARTIES);
		cmd.setAttribute(jsonKey.LONGTITUDE, longitude);
		cmd.setAttribute(jsonKey.LATITUDE, latitude);
		cmd.setAttribute(jsonKey.ALTITUDE, altitude);
		return cmd;
	}
	public static Command create_searchParty_Command(String name) throws JSONException {
		Command cmd = new Command(CommandType.SEARCH_PARTY);
		cmd.setAttribute(jsonKey.NAME, name);
		return cmd;
	}
	
	public static Command create_join_Command(int partyID) throws JSONException {
		Command cmd = new Command(CommandType.JOIN);
		cmd.setAttribute(jsonKey.PARTY_ID, partyID);
		return cmd;
	}
	
	public static Command create_create_Command(String name,boolean isPrivate) throws JSONException {
		Command cmd = new Command(CommandType.CREATE);
		cmd.setAttribute(jsonKey.NAME, name);
		cmd.setAttribute(jsonKey.IS_PRIVATE, isPrivate);
		return cmd;
	}
	
	public static Command create_addSong_Command(String database_id,) throws JSONException {
		Command cmd = new Command(CommandType.ADD_SONG);
		cmd.setAttribute(jsonKey.DB_ID, database_id);
		return cmd;
	}
	public static Command create_deleteSong_Command(int trackId) throws JSONException {
		Command cmd = new Command(CommandType.DELETE_SONG);
		cmd.setAttribute(jsonKey.TRACK_ID, trackId);
		return cmd;
	}
	public static Command create_swapSongs_Command(int trackId_1,int trackId_2) throws JSONException {
		Command cmd = new Command(CommandType.SWAP_SONGS);
		cmd.setAttribute(jsonKey.TRACK_ID_1, trackId_1);
		cmd.setAttribute(jsonKey.TRACK_ID_2, trackId_2);
		return cmd;
	}
	public static Command create_playSong_Command(int trackId,int offset,userIntention userIntention_enum) throws JSONException {
		Command cmd = new Command(CommandType.PLAY_SONG);
		cmd.setAttribute(jsonKey.TRACK_ID, trackId);
		cmd.setAttribute(jsonKey.OFFSET, offset);
		cmd.setAttribute(jsonKey.USER_INTENTION, userIntention_enum.getInt());
		return cmd;
	}
	public static Command create_imReady_Command(int trackId) throws JSONException {
		Command cmd = new Command(CommandType.IM_READY);
		cmd.setAttribute(jsonKey.TRACK_ID, trackId);
		return cmd;
	}
	public static Command create_pause_Command(int trackId,int offset) throws JSONException {
		Command cmd = new Command(CommandType.PAUSE);
		cmd.setAttribute(jsonKey.TRACK_ID, trackId);
		cmd.setAttribute(jsonKey.OFFSET, offset);
		return cmd;
	}
	
	public static Command create_makePrivate_Command(boolean isPrivate) throws JSONException {
		Command cmd = new Command(CommandType.MAKE_PRIVATE);
		cmd.setAttribute(jsonKey.IS_PRIVATE, isPrivate);
		return cmd;
	}
	
	public static Command create_renameParty_Command(String name) throws JSONException {
		Command cmd = new Command(CommandType.RENAME_PARTY);
		cmd.setAttribute(jsonKey.NAME, name);
		return cmd;
	}
	public static Command create_confirmRequest_Command(int userId,boolean confirmed) throws JSONException {
		Command cmd = new Command(CommandType.CONFIRM_REQUEST);
		cmd.setAttribute(jsonKey.USER_ID, userId);
		cmd.setAttribute(jsonKey.CONFIRMED, confirmed);
		return cmd;
	}
	public static Command create_makeAdmin_Command(int userId) throws JSONException {
		Command cmd = new Command(CommandType.MAKE_ADMIN);
		cmd.setAttribute(jsonKey.USER_ID, userId);
		return cmd;
	}
	public static Command create_updateLocation_Command(double longtitude,double latitude,double altitude) throws JSONException {
		Command cmd = new Command(CommandType.UPDATE_LOCATION);
		cmd.setAttribute(jsonKey.LONGTITUDE,longtitude);
		cmd.setAttribute(jsonKey.LATITUDE,latitude);
		cmd.setAttribute(jsonKey.ALTITUDE,altitude);
		return cmd;
	}
	public static Command create_leaveParty_Command() throws JSONException {
		Command cmd = new Command(CommandType.LEAVE_PARTY);
		return cmd;
	}
	
	public static Command create_syncParty_Command(JSONObject partyInfo, boolean partyIsPlaying) throws JSONException {
		Command cmd = new Command(CommandType.SYNC_PARTY,partyInfo);
		cmd.setAttribute(jsonKey.PARTY_PLAYING, new JSONArray().put(partyIsPlaying));
		return cmd;
	}
	
	public static Command create_rejected_Command() throws JSONException {
		Command cmd = new Command(CommandType.REJECTED);
		return cmd;
	}

	public static Command create_searchResult_command(JSONArray resultArray) throws JSONException {
		Command cmd = new Command(CommandType.SEARCH_RESULT);
		cmd.setAttribute(jsonKey.RESULT, resultArray);
		return cmd;
	}
}
